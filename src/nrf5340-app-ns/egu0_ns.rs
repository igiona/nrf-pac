#[doc = "Event generator unit 0"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Egu0ns {
    ptr: *mut u8,
}
unsafe impl Send for Egu0ns {}
unsafe impl Sync for Egu0ns {}
impl Egu0ns {
    #[inline(always)]
    pub const unsafe fn from_ptr(ptr: *mut ()) -> Self {
        Self { ptr: ptr as _ }
    }
    #[inline(always)]
    pub const fn as_ptr(&self) -> *mut () {
        self.ptr as _
    }
    #[doc = "Description collection: Trigger n for triggering the corresponding TRIGGERED\\[n\\] event"]
    #[inline(always)]
    pub const fn tasks_trigger(self, n: usize) -> crate::common::Reg<u32, crate::common::W> {
        assert!(n < 16usize);
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0usize + n * 4usize) as _) }
    }
    #[doc = "Description collection: Subscribe configuration for task TRIGGER\\[n\\]"]
    #[inline(always)]
    pub const fn subscribe_trigger(
        self,
        n: usize,
    ) -> crate::common::Reg<regs::SubscribeTrigger, crate::common::RW> {
        assert!(n < 16usize);
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x80usize + n * 4usize) as _) }
    }
    #[doc = "Description collection: Event number n generated by triggering the corresponding TRIGGER\\[n\\] task"]
    #[inline(always)]
    pub const fn events_triggered(self, n: usize) -> crate::common::Reg<u32, crate::common::RW> {
        assert!(n < 16usize);
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0100usize + n * 4usize) as _) }
    }
    #[doc = "Description collection: Publish configuration for event TRIGGERED\\[n\\]"]
    #[inline(always)]
    pub const fn publish_triggered(
        self,
        n: usize,
    ) -> crate::common::Reg<regs::PublishTriggered, crate::common::RW> {
        assert!(n < 16usize);
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0180usize + n * 4usize) as _) }
    }
    #[doc = "Enable or disable interrupt"]
    #[inline(always)]
    pub const fn inten(self) -> crate::common::Reg<regs::Inten, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0300usize) as _) }
    }
    #[doc = "Enable interrupt"]
    #[inline(always)]
    pub const fn intenset(self) -> crate::common::Reg<regs::Inten, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0304usize) as _) }
    }
    #[doc = "Disable interrupt"]
    #[inline(always)]
    pub const fn intenclr(self) -> crate::common::Reg<regs::Inten, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.ptr.add(0x0308usize) as _) }
    }
}
pub mod regs;
pub mod vals;
